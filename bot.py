import os
import pickle
import locale
from datetime import datetime, timedelta
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from dotenv import load_dotenv
import calendar
import logging

load_dotenv()

try:
    locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')
except locale.Error:
    pass

# –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
RU_MONTHS = [
    "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
    "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤ (SCOPES)
SCOPES = ['https://www.googleapis.com/auth/calendar ']

user_data = {}

def get_calendar_service():
    logger.info("–ó–∞–ø—Ä–æ—Å —Å–µ—Ä–≤–∏—Å–∞ Google Calendar")
    token_path = "token.pickle"
    
    if not os.path.exists(token_path):
        raise FileNotFoundError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")

    with open(token_path, 'rb') as token_file:
        creds = pickle.load(token_file)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞")
                creds.refresh(Request())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
                raise
        else:
            logger.warning("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")
            raise FileNotFoundError("–ù–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞.")

    return build('calendar', 'v3', credentials=creds)

def add_event_to_calendar(summary, start_time, end_time):
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å")
    try:
        service = get_calendar_service()
        event = {
            'summary': summary,
            'start': {'dateTime': start_time.isoformat(), 'timeZone': 'Asia/Yekaterinburg'},
            'end': {'dateTime': end_time.isoformat(), 'timeZone': 'Asia/Yekaterinburg'}
        }
        created_event = service.events().insert(calendarId='primary', body=event).execute()
        return created_event.get('htmlLink')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        raise

async def start(update: Update, context) -> None:
    keyboard = [["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–ü–æ–º–æ—â—å", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def restart(update: Update, context) -> None:
    chat_id = update.effective_chat.id
    user_data[chat_id] = {}
    await start(update, context)

async def help_command(update: Update, context) -> None:
    await update.message.reply_text("–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –≤—ã–±–µ—Ä–∏—Ç–µ \"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É\" –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

async def handle_message(update: Update, context) -> None:
    text = update.message.text.strip().lower()
    chat_id = update.effective_chat.id

    if text == "–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        user_data[chat_id] = {'state': 'awaiting_task'}
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    elif user_data.get(chat_id, {}).get('state') == 'awaiting_task':
        user_data[chat_id]['task'] = text
        user_data[chat_id]['state'] = 'selecting_date'
        today = datetime.today()
        user_data[chat_id]['year'] = today.year
        user_data[chat_id]['month'] = today.month
        await show_calendar(chat_id, today.year, today.month, context)
    elif user_data.get(chat_id, {}).get('state') == 'selecting_time':
        try:
            hour, minute = map(int, text.split(":"))
            if 0 <= hour <= 23 and 0 <= minute <= 59:
                selected_date = user_data[chat_id]['date']
                task = user_data[chat_id]['task']
                start_datetime = selected_date.replace(hour=hour, minute=minute)
                end_datetime = start_datetime + timedelta(minutes=30)

                event_link = add_event_to_calendar(task, start_datetime, end_datetime)
                await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞! –°—Å—ã–ª–∫–∞: {event_link}")
                user_data.pop(chat_id)
            else:
                await update.message.reply_text("üïí –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
        except ValueError:
            await update.message.reply_text("üïí –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.")
    elif text == "–ø–æ–º–æ—â—å":
        await help_command(update, context)
    elif text == "–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å":
        await restart(update, context)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

def build_calendar(year, month):
    markup = []
    cal = calendar.Calendar()
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    markup.append([InlineKeyboardButton(day, callback_data="ignore") for day in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    for week in cal.monthdayscalendar(year, month):
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(InlineKeyboardButton(str(day), callback_data=f"day:{year}-{month}-{day}"))
        markup.append(row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    month_name = RU_MONTHS[month - 1].capitalize()
    markup.append([
        InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"prev:{year}:{month}"),
        InlineKeyboardButton(f"{month_name} {year}", callback_data="ignore"),
        InlineKeyboardButton("‚û°Ô∏è", callback_data=f"next:{year}:{month}")
    ])
    return InlineKeyboardMarkup(markup)

async def handle_callback(update: Update, context) -> None:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    data = query.data

    if data.startswith("day:"):
        _, date_str = data.split(":")
        y, m, d = map(int, date_str.split("-"))
        selected_date = datetime(y, m, d)
        user_data[chat_id]['date'] = selected_date
        user_data[chat_id]['state'] = 'selecting_time'
        await query.message.reply_text("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:")
    elif data.startswith("prev:") or data.startswith("next:"):
        _, y, m = data.split(":")
        year, month = int(y), int(m)
        if data.startswith("prev:"):
            month -= 1
            if month < 1:
                month = 12
                year -= 1
        else:
            month += 1
            if month > 12:
                month = 1
                year += 1
        user_data[chat_id]['year'] = year
        user_data[chat_id]['month'] = month
        await show_calendar(chat_id, year, month, context)

async def show_calendar(chat_id: int, year: int, month: int, context):
    markup = build_calendar(year, month)
    month_name = RU_MONTHS[month - 1].capitalize()
    message_text = f"üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:\n\n{month_name} {year}"

    if 'calendar_message_id' in user_data.get(chat_id, {}):
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=user_data[chat_id]['calendar_message_id'],
            text=message_text,
            reply_markup=markup
        )
    else:
        message = await context.bot.send_message(
            chat_id=chat_id,
            text=message_text,
            reply_markup=markup
        )
        user_data[chat_id]['calendar_message_id'] = message.message_id

def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    token = os.getenv("TELEGRAM_TOKEN")
    if not token:
        logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env")
        return

    application = Application.builder().token(token).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("restart", restart))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –≤–µ–±—Ö—É–∫ (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    application.bot.delete_webhook()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω Render
    domain = os.getenv("RENDER_EXTERNAL_URL")
    if not domain:
        domain = "http://localhost:8000"  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±—Ö—É–∫
    application.run_webhook(
        listen="0.0.0.0",
        port=int(os.getenv("PORT", 8000)),
        url_path=token,
        webhook_url=f"{domain}/{token}"
    )

if __name__ == '__main__':
    main()