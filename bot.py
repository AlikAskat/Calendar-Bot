import os
import logging
from datetime import datetime
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
def get_date_keyboard():
    now = datetime.now()
    keyboard = [
        [
            InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_today"),
            InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_tomorrow")
        ],
        [
            InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="choose_date"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤—Å—Ç—Ä–µ—á–∞–º–∏. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )
    user_states[user.id] = "main_menu"

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id

    if text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–¥–∞—á–∏:",
            reply_markup=get_date_keyboard()
        )
        user_states[user_id] = "awaiting_date"
        
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á. –ù–∞–∂–º–∏—Ç–µ 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é."
        )
        
    elif text == "üîç –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–¥–∞—á:"
        )
        user_states[user_id] = "awaiting_search"
        
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        keyboard = [
            [InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="settings_notifications")],
            [InlineKeyboardButton("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", callback_data="settings_timezone")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        await update.message.reply_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        state = user_states.get(user_id, "main_menu")
        
        if state == "awaiting_task_description":
            await update.message.reply_text(
                f"–ó–∞–¥–∞—á–∞ '{text}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!\n\n"
                "–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = "main_menu"
            
        elif state == "awaiting_search":
            await update.message.reply_text(
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{text}':\n\n"
                "–ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = "main_menu"
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
                reply_markup=get_main_keyboard()
            )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query

    if query.data.startswith("date_"):
        date_type = query.data.split("_")[1]
        if date_type == "today":
            date_text = "—Å–µ–≥–æ–¥–Ω—è"
        elif date_type == "tomorrow":
            date_text = "–∑–∞–≤—Ç—Ä–∞"
        
        await query.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_text}\n"
            "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
        )
        user_states[user_id] = "awaiting_task_description"
        
    elif query.data == "choose_date":
        await query.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:"
        )
        user_states[user_id] = "awaiting_custom_date"
        
    elif query.data == "cancel":
        await query.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = "main_menu"
        
    elif query.data.startswith("settings_"):
        setting = query.data.split("_")[1]
        if setting == "notifications":
            await query.message.edit_text(
                "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
                "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            )
        elif setting == "timezone":
            await query.message.edit_text(
                "üåç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞\n\n"
                "–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ..."
            )
            
    elif query.data == "back_to_main":
        await query.message.reply_text(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        user_states[user_id] = "main_menu"

def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(handle_callback))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è webhook
    port = int(os.environ.get("PORT", 10000))
    app_url = os.environ.get("RENDER_EXTERNAL_URL")
    
    if not app_url:
        logger.error("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    webhook_url = f"{app_url}/webhook/{TOKEN}"
    logger.info(f"Setting webhook URL: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{TOKEN}",
        webhook_url=webhook_url,
        drop_pending_updates=True
    )

if __name__ == "__main__":
    main()