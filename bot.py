import os
import json
import logging
from datetime import datetime, timedelta
import calendar
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes
)
from google.oauth2 import service_account
from googleapiclient.discovery import build
from google.api_core import retry
import googleapiclient.errors

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_TOKEN")

if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
SCOPES = ['https://www.googleapis.com/auth/calendar']
TIMEZONE = 'Asia/Almaty'

class UserSessionManager:
    def __init__(self):
        self.states = {}
        self.data = {}
        self.last_activity = {}
        self.TIMEOUT = timedelta(hours=1)

    def update_activity(self, user_id):
        self.last_activity[user_id] = datetime.now()

    def get_state(self, user_id):
        self.cleanup_old_sessions()
        return self.states.get(user_id, "main_menu")

    def set_state(self, user_id, state):
        self.states[user_id] = state
        self.update_activity(user_id)

    def get_data(self, user_id):
        return self.data.get(user_id, {})

    def set_data(self, user_id, data):
        self.data[user_id] = data
        self.update_activity(user_id)

    def cleanup_old_sessions(self):
        current_time = datetime.now()
        expired_users = [
            user_id for user_id, last_active in self.last_activity.items()
            if current_time - last_active > self.TIMEOUT
        ]
        for user_id in expired_users:
            self.states.pop(user_id, None)
            self.data.pop(user_id, None)
            self.last_activity.pop(user_id, None)

user_session = UserSessionManager()

def get_google_calendar_service():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ Google Calendar —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Service Account"""
    try:
        credentials_json = os.getenv('GOOGLE_CREDENTIALS')
        if not credentials_json:
            logger.error("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            return None
        
        credentials = service_account.Credentials.from_service_account_info(
            json.loads(credentials_json), scopes=SCOPES)
        return build('calendar', 'v3', credentials=credentials)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è: {e}")
        return None

def create_calendar_keyboard(year: int, month: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É-–∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    keyboard = []
    month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å', 
                  '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    
    keyboard.append([InlineKeyboardButton(f"{month_names[month-1]} {year}", callback_data="ignore")])
    keyboard.append([InlineKeyboardButton(d, callback_data="ignore") for d in ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]])
    
    for week in calendar.monthcalendar(year, month):
        row = []
        for day in week:
            if day == 0:
                row.append(InlineKeyboardButton(" ", callback_data="ignore"))
            else:
                row.append(InlineKeyboardButton(str(day), callback_data=f"date_{year}_{month}_{day}"))
        keyboard.append(row)
    
    nav_row = []
    prev_month = month - 1 if month > 1 else 12
    next_month = month + 1 if month < 12 else 1
    prev_year = year if month > 1 else year - 1
    next_year = year if month < 12 else year + 1
    
    nav_row.append(InlineKeyboardButton("<<", callback_data=f"calendar_{prev_year}_{prev_month}"))
    nav_row.append(InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    nav_row.append(InlineKeyboardButton(">>", callback_data=f"calendar_{next_year}_{next_month}"))
    keyboard.append(nav_row)
    
    return InlineKeyboardMarkup(keyboard)

def create_time_keyboard(selected_hour: int = 0, selected_minute: int = 0):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    keyboard = []
    
    keyboard.append([
        InlineKeyboardButton("–ß–∞—Å—ã", callback_data="ignore"),
        InlineKeyboardButton("–ú–∏–Ω—É—Ç—ã", callback_data="ignore")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üîº", callback_data=f"hour_up_{selected_hour}"),
        InlineKeyboardButton("üîº", callback_data=f"min_up_{selected_minute}")
    ])
    
    keyboard.append([
        InlineKeyboardButton(f"{selected_hour:02d}", callback_data="ignore"),
        InlineKeyboardButton(f"{selected_minute:02d}", callback_data="ignore")
    ])
    
    keyboard.append([
        InlineKeyboardButton("üîΩ", callback_data=f"hour_down_{selected_hour}"),
        InlineKeyboardButton("üîΩ", callback_data=f"min_down_{selected_minute}")
    ])
    
    keyboard.append([
        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"time_{selected_hour:02d}:{selected_minute:02d}"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
    ])
    
    return InlineKeyboardMarkup(keyboard)

def get_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [KeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

@retry.Retry(predicate=retry.if_transient_error)
async def add_event_to_calendar(title: str, start_time: datetime) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"""
    try:
        service = get_google_calendar_service()
        if not service:
            return ""
            
        event = {
            'summary': title,
            'start': {
                'dateTime': start_time.isoformat(),
                'timeZone': TIMEZONE,
            },
            'end': {
                'dateTime': (start_time + timedelta(hours=1)).isoformat(),
                'timeZone': TIMEZONE,
            },
        }

        event = service.events().insert(calendarId='primary', body=event).execute()
        return f"https://calendar.google.com/calendar/event?eid={event['id']}"
    except googleapiclient.errors.HttpError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Google Calendar API: {e}")
        return ""
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return ""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    user_session.set_state(user.id, "main_menu")
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ.\n"
        "–ù–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –∏–ª–∏ '‚ùì –ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard()
    )

async def show_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"""
    help_text = (
        "üìù *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n"
        "‚ûï *–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É* - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:\n"
        "   1. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "   2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ\n"
        "   3. –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è\n"
        "   4. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –≤ Google Calendar\n\n"
        "üîÑ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫* - –æ—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n\n"
        "‚ùì *–ü–æ–º–æ—â—å* - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'"
    )
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—â–∞–µ—Ç —á–∞—Ç –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    user_id = update.effective_user.id
    user_session.set_state(user_id, "main_menu")
    user_session.set_data(user_id, {})
    
    await update.message.reply_text(
        "üîÑ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\n"
        "–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ:",
        reply_markup=get_main_keyboard()
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    state = user_session.get_state(user_id)
    
    if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
        await restart(update, context)
        return
        
    elif text == "‚ùì –ü–æ–º–æ—â—å":
        await show_help(update, context)
        return
        
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"
        )
        user_session.set_state(user_id, "awaiting_title")
        return

    if state == "awaiting_title":
        user_session.set_data(user_id, {"title": text})
        now = datetime.now()
        await update.message.reply_text(
            f"–ó–∞–¥–∞—á–∞: {text}\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:",
            reply_markup=create_calendar_keyboard(now.year, now.month)
        )
        user_session.set_state(user_id, "awaiting_date")
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚ùì –ü–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:",
            reply_markup=get_main_keyboard()
        )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    user_id = query.from_user.id
    
    await query.answer()

    if query.data.startswith("calendar_"):
        _, year, month = query.data.split("_")
        await query.message.edit_reply_markup(
            reply_markup=create_calendar_keyboard(int(year), int(month))
        )
        
    elif query.data.startswith("date_"):
        _, year, month, day = query.data.split("_")
        selected_date = f"{day}.{month}.{year}"
        user_data = user_session.get_data(user_id)
        if "title" not in user_data:
            user_data = {"title": "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"}
        user_data["date"] = {"year": int(year), "month": int(month), "day": int(day)}
        user_session.set_data(user_id, user_data)
        
        await query.message.reply_text(
            f"–î–∞—Ç–∞: {selected_date}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç):",
            reply_markup=create_time_keyboard(0, 0)
        )
        user_session.set_state(user_id, "awaiting_time")
    
    elif query.data.startswith("hour_up_") or query.data.startswith("hour_down_"):
        _, direction, current = query.data.split("_")
        current_hour = int(current)
        
        if direction == "up":
            new_hour = current_hour + 1 if current_hour < 23 else 0
        else:
            new_hour = current_hour - 1 if current_hour > 0 else 23
            
        current_minutes = int(query.message.reply_markup.inline_keyboard[2][1].text)
        
        await query.message.edit_reply_markup(
            reply_markup=create_time_keyboard(new_hour, current_minutes)
        )
    
    elif query.data.startswith("min_up_") or query.data.startswith("min_down_"):
        _, direction, current = query.data.split("_")
        current_minute = int(current)
        
        minutes_steps = [0, 15, 30, 45]
        current_index = minutes_steps.index(current_minute)
        
        if direction == "up":
            new_index = (current_index + 1) % len(minutes_steps)
        else:
            new_index = (current_index - 1) % len(minutes_steps)
            
        new_minute = minutes_steps[new_index]
        current_hours = int(query.message.reply_markup.inline_keyboard[2][0].text)
        
        await query.message.edit_reply_markup(
            reply_markup=create_time_keyboard(current_hours, new_minute)
        )
    
    elif query.data.startswith("time_"):
        time = query.data.split("_")[1]
        user_data = user_session.get_data(user_id)
        if not user_data:
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞:",
                reply_markup=get_main_keyboard()
            )
            return
            
        user_data["time"] = time
        title = user_data.get("title", "–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞")
        date = user_data["date"]
        hour, minute = map(int, time.split(":"))
        
        start_time = datetime(
            date["year"], date["month"], date["day"],
            hour, minute
        )
        
        calendar_url = await add_event_to_calendar(title, start_time)
        
        if calendar_url:
            await query.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n"
                f"üìù {title}\n"
                f"üìÖ {start_time.strftime('%d.%m.%Y %H:%M')}\n\n"
                f"üîó –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ: {calendar_url}",
                reply_markup=get_main_keyboard()
            )
        else:
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=get_main_keyboard()
            )
        
        user_session.set_state(user_id, "main_menu")
        user_session.set_data(user_id, {})
    
    elif query.data == "cancel":
        await query.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:",
            reply_markup=get_main_keyboard()
        )
        user_session.set_state(user_id, "main_menu")
        user_session.set_data(user_id, {})

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Update {update} caused error {context.error}")
    if update.effective_message:
        await update.effective_message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫'.",
            reply_markup=get_main_keyboard()
        )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
    
    application = Application.builder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", show_help))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_error_handler(error_handler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è webhook
    port = int(os.environ.get("PORT", 10000))
    app_url = os.environ.get("RENDER_EXTERNAL_URL")
    
    if not app_url:
        logger.error("RENDER_EXTERNAL_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    webhook_url = f"{app_url}/webhook/{TOKEN}"
    logger.info(f"Setting webhook URL: {webhook_url}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=f"webhook/{TOKEN}",
        webhook_url=webhook_url,
        drop_pending_updates=True,
        webhook_max_connections=40,
        read_timeout=7,
        write_timeout=7,
        connect_timeout=7
    )

if __name__ == "__main__":
    main()